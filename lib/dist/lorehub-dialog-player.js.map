{"version":3,"sources":["webpack://lorehub-dialog-player/webpack/universalModuleDefinition","webpack://lorehub-dialog-player/webpack/bootstrap","webpack://lorehub-dialog-player/webpack/runtime/define property getters","webpack://lorehub-dialog-player/webpack/runtime/hasOwnProperty shorthand","webpack://lorehub-dialog-player/webpack/runtime/make namespace object","webpack://lorehub-dialog-player/./src/nodes/DialogNode.js","webpack://lorehub-dialog-player/./src/Dialog.js","webpack://lorehub-dialog-player/./src/contents/DialogTextContent.js","webpack://lorehub-dialog-player/./src/contents/DialogReferenceContent.js","webpack://lorehub-dialog-player/./src/options/DialogNodeOption.js","webpack://lorehub-dialog-player/./src/converters/convertDataToDialog.js","webpack://lorehub-dialog-player/./src/commands/Command.js","webpack://lorehub-dialog-player/./src/commands/GoToNextNode.js","webpack://lorehub-dialog-player/./src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;;ACNe;AACf;AACA,aAAa,OAAO;AACpB,aAAa,sCAAsC;AACnD,aAAa,gBAAgB;AAC7B,aAAa,wBAAwB;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;;AAEA;AACA,aAAa,wBAAwB;AACrC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA8C,GAAG,eAAe,QAAQ;AACxE;AACA;AACA;;;;ACpC2C;;AAE5B;AACf;AACA,YAAY,OAAO;AACnB,YAAY,WAAW;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC9Ce;AACf;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;;ACTe;AACf;AACA,cAAc,OAAO;AACrB,cAAc,cAAc;AAC5B,cAAc,cAAc;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;ACpBe;AACf;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA,sDAAsD,GAAG,YAAY,KAAK;AAC1E;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA;;;ACvB+B;AACc;AACiB;AACU;AACb;;AAE3D;AACA;AACA,WAAW,UAAU;AACrB,WAAW,qBAAqB;AAChC,WAAW,uBAAuB;AAClC,WAAW,mBAAmB;AAC9B,aAAa;AACb;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,wBAAwB,eAAe;AACvC,0BAA0B,iBAAiB;AAC3C,sBAAsB,aAAa;AACnC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,yBAAyB;AACpE;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA;;AAEA;AACA,WAAW,qBAAqB;AAChC,WAAW,uBAAuB;AAClC,WAAW,mBAAmB;AAC9B;AACA;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA,4BAA4B,aAAiB;AAC7C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,uGAAuG,2BAA2B;AAClI;AACA,4BAA4B,oBAAsB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AC7HO;AACP;AACA;AACA;AACA;;;ACJoC;;AAErB,2BAA2B,OAAO;;AAEjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpBmE;AACrC;AACc;AACiB;AACS;AACb;AACN;;AAUjD","file":"lorehub-dialog-player.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lorehub-dialog-player\"] = factory();\n\telse\n\t\troot[\"lorehub-dialog-player\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export default class DialogNode {\n  /**\n   * @param {String} id\n   * @param {DialogTextContent | DialogTextContent} content\n   * @param {DialogNode|null} nextNode\n   * @param {Array<DialogNodeOption>} options\n   */\n  constructor(id, content, nextNode = null, options = []) {\n    dialogNodeGuard(id, content);\n\n    this.id = id;\n    this.content = content;\n    this.nextNode = nextNode;\n    this.options = options;\n  }\n\n  /**\n   * @param {DialogNode|null} nextNode\n   */\n  setNextNode(node) {\n    this.nextNode = node;\n  }\n\n  /**\n   * @param {Array<DialogNodeOption>} options\n   */\n  setOptions(options) {\n    this.options = options;\n  }\n}\n\nfunction dialogNodeGuard(id, content) {\n  if (id == null || content == null) {\n    throw new Error(\n      `Cannot create DialogNode because id: ${id} or content: ${content} is null.`\n    );\n  }\n}\n","\nimport DialogNode from './nodes/DialogNode'\n\nexport default class Dialog {\n  /**\n  * @param {String} id\n  * @param {DialogNode} startNode\n  */\n  constructor(id, startNode) {\n    dialogGuard(id, startNode);\n\n    this.id = id;\n    this.startNode = startNode;\n    this.nodes = [];\n    this.currentNode = startNode;\n  }\n\n  get isFinished() {\n    return this.currentNode == null;\n  }\n\n  /**\n   * @param {DialogNode} node \n   */\n  setCurrentNode(node) {\n    this.currentNode = node;\n  }\n  /**\n    * @param {DialogNode} node \n    */\n  addNode(node) {\n    if (node instanceof DialogNode) {\n      this.nodes.push(node);\n    }\n    else {\n      throw new Error(\"node must be instance of DialogNode\");\n    }\n  }\n}\n\nfunction dialogGuard(id, startNode) {\n  if (id == null || startNode == null) {\n    throw new Error(\n      \"Cannot create Dialog because id or/and startNode is null.\"\n    );\n  }\n}\n","export default class DialogContent {\n  /**\n   * @param {string} id\n   * @param {string} text\n   */\n  constructor(id, text) {\n    this.id = id;\n    this.text = text;\n  }\n}\n","export default class ContentDataReference {\n    /**\n    * @param {string} id\n    * @param {string | null} text\n    * @param {string | null} documentId\n    */\n    constructor(id, text, documentId, documentName) {\n        this.id = id;\n        this._text = text;\n        this.documentId = documentId;\n        this.documentName = documentName\n    }\n\n    /**\n     * Will use document name if text is null.\n     */\n    get text() {\n        return this._text == null ? this.documentName : this._text;\n    }\n\n}\n","export default class DialogNodeOption {\n  /**\n   * @param {String} id\n   * @param {String} text\n   * @param {DialogNode|null} nextNode\n   */\n  constructor(id, text, nextNode = null) {\n    if (id == null || text == null) {\n      throw new Error(\n        `Cannot create DialogNodeOption because id: ${id} or text: ${text} is null.`\n      );\n    }\n    this.id = id;\n    this.text = text;\n    this.nextNode = nextNode;\n  }\n\n  /**\n   * @param {DialogNode|null} nextNode\n   */\n  setNextNode(nextNode = null) {\n    this.nextNode = nextNode;\n  }\n}\n","import Dialog from \"../Dialog\";\nimport DialogNode from \"../nodes/DialogNode\";\nimport DialogTextContent from \"../contents/DialogTextContent\";\nimport DialogReferenceContent from '../contents/DialogReferenceContent';\nimport DialogNodeOption from '../options/DialogNodeOption';\n\n/**\n * Will convert data from server to a dialog.\n * @param {DialogDTO} dialogDTO\n * @param {Array<DialogNodeDTO>} dialogNodeDTOs\n * @param {Array<ContentBlockDTO>} contentBlockDTOs\n * @param {Array<DocumentDTO>} documentDTOs\n * @returns {Dialog}\n */\nexport default function convertDataToDialog(\n  dialogDTO,\n  dialogNodeDTOs,\n  contentBlockDTOs,\n  documentDTOs\n) {\n  if (\n    dialogDTO == null ||\n    dialogNodeDTOs == null ||\n    contentBlockDTOs == null ||\n    documentDTOs == null\n  ) {\n    throw new Error(\n      `Cannot convert DTOs to a Dialog because \n      dialogDTO: ${dialogDTO} cannot be null OR \n      dialogNodeDTOs: ${dialogNodeDTOs} cannot be null OR \n      contentBlockDTOs: ${contentBlockDTOs} cannot be null OR\n      documentDTOs: ${documentDTOs} cannot be null.`\n    );\n  }\n\n  const nodes = createDialogNodes(\n    dialogNodeDTOs,\n    contentBlockDTOs,\n    documentDTOs\n  );\n  const startingNode = nodes.find(n => n.id === dialogDTO.startingNodeId);\n\n  if (startingNode == null) {\n    throw new Error(\n      `Cannot find starting node with id ${dialogDTO.startingNodeId}.`\n    );\n  }\n  const dialog = new Dialog(dialogDTO.id, startingNode);\n  return dialog;\n}\n\n/**\n * @param {Array<DialogNodeDTO>} dialogNodeDTOs\n * @param {Array<ContentBlockDTO>} contentBlockDTOs\n * @param {Array<DocumentDTO>} documentDTOs\n */\nfunction createDialogNodes(dialogNodeDTOs, contentBlockDTOs, documentDTOs) {\n  const nodes = [];\n  let optionsDTO = [];\n  for (let i = 0; i < dialogNodeDTOs.length; i++) {\n    const dto = dialogNodeDTOs[i];\n    const contentDTOs = contentBlockDTOs\n      .filter(c => c.dialogNodeId == dto.id)\n      .sort((a, b) => (a.index > b.index ? 1 : -1));\n    let contentForNode = [];\n    for (let z = 0; z < contentDTOs.length; z++) {\n      const contentDTO = contentDTOs[z];\n      if (contentDTO.type === \"text\") {\n        const content = new DialogTextContent(\n          contentDTO.id,\n          contentDTO.data.text\n        );\n        contentForNode.push(content);\n      } else if (contentDTO.type === \"reference\") {\n        const neededDoc = documentDTOs.find(\n          d => d.id === contentDTO.data.documentId\n        );\n        if (neededDoc == null)\n          throw new Error(\n            `To create a node for a reference type I need document. I cannot find a document with id ${contentDTO.data.documentId}`\n          );\n        const content = new DialogReferenceContent(\n          contentDTO.id,\n          contentDTO.data.text,\n          contentDTO.data.documentId,\n          neededDoc.name\n        );\n        contentForNode.push(content);\n      } else {\n        throw new Error(\n          `Cannot convert to DialogContent for type ${contentDTO.type}.`\n        );\n      }\n    }\n    const optionsForNodeDTO = [];\n    for (const optionDTO of dto.options) {\n      optionsForNodeDTO.push(optionDTO);\n    }\n    optionsDTO = optionsDTO.concat(optionsForNodeDTO);\n    nodes.push(new DialogNode(dto.id, contentForNode, null, []));\n  }\n\n  for (let i = 0; i < nodes.length; i++) {\n    const dto = dialogNodeDTOs[i];\n    const node = nodes[i];\n    const options = [];\n    if (dto.nextDialogNodeId) {\n      const nextNode = nodes.find(n => n.id === dto.nextDialogNodeId);\n      node.setNextNode(nextNode ?? null);\n    }\n    if (dto.options && dto.options.length > 0) {\n      for (const optionDTO of dto.options) {\n        const nextNode = nodes.find(n => n.id === optionDTO.nextDialogNodeId);\n        const option = new DialogNodeOption(\n          optionDTO.id,\n          optionDTO.text,\n          nextNode ?? null\n        );\n        options.push(option);\n      }\n      node.setOptions(options);\n    }\n  }\n\n  return nodes;\n}\n","export class Command {\n  execute() {\n    throw new Error('execute was not implemented')\n  }\n}\n","import { Command } from \"./Command\";\n\nexport default class GoToNextNode extends Command {\n\n  constructor(dialog, nextNode) {\n    super();\n    this.dialog = dialog;\n    this.nextNode = nextNode;\n  }\n\n  execute() {\n    this.dialog.setCurrentNode(this.nextNode)\n  }\n\n  toString() {\n    if (this.nextNode == null) {\n      return GoToNextNode.name + ' empty'\n    }\n    return GoToNextNode.name + ' ' + this.nextNode.id\n  }\n}\n","import convertDataToDialog from './converters/convertDataToDialog';\nimport Dialog from './Dialog';\nimport DialogNode from './nodes/DialogNode';\nimport DialogTextContent from './contents/DialogTextContent';\nimport DialogReferenceContent from \"./contents/DialogReferenceContent\"\nimport DialogNodeOption from './options/DialogNodeOption'\nimport GoToNextNode from './commands/GoToNextNode';\n\nexport {\n    convertDataToDialog,\n    Dialog,\n    DialogNode,\n    DialogTextContent,\n    DialogReferenceContent,\n    DialogNodeOption,\n    GoToNextNode\n};\n"],"sourceRoot":""}