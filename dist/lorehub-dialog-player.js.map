{"version":3,"sources":["webpack://lorehub-dialog-player/webpack/universalModuleDefinition","webpack://lorehub-dialog-player/webpack/bootstrap","webpack://lorehub-dialog-player/webpack/runtime/define property getters","webpack://lorehub-dialog-player/webpack/runtime/hasOwnProperty shorthand","webpack://lorehub-dialog-player/webpack/runtime/make namespace object","webpack://lorehub-dialog-player/./src/Dialog.js","webpack://lorehub-dialog-player/./src/DialogNode.js","webpack://lorehub-dialog-player/./src/DialogTextContent.js","webpack://lorehub-dialog-player/./src/convertDataToDialog.js","webpack://lorehub-dialog-player/./src/dto/ContetnBlockDTO.js","webpack://lorehub-dialog-player/./src/dto/DialogDTO.js","webpack://lorehub-dialog-player/./src/dto/DialogNodeDTO.js","webpack://lorehub-dialog-player/./src/index.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;;;;;;;;;ACNsC;;AAEvB;AACf;AACA,aAAa,OAAO;AACpB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AC1CoD;AACrC;AACf;AACA,aAAa,OAAO;AACpB,aAAa,6CAA6C;AAC1D,aAAa,gBAAgB;AAC7B;AACA;AACA;AACA;AACA,gDAAgD,GAAG,eAAe,QAAQ;AAC1E;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACtDe;AACf;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;;ACT8B;AACQ;AACc;AACZ;AACQ;AACI;;AAEpD;AACA;AACA,WAAW,UAAU;AACrB,WAAW,qBAAqB;AAChC,WAAW,uBAAuB;AAClC,aAAa;AACb;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B,wBAAwB,eAAe;AACvC,0BAA0B,iBAAiB;AAC3C;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,yBAAyB;AACpE;AACA;AACA,qBAAqB,MAAM;AAC3B;AACA;;AAEA;AACA,WAAW,qBAAqB;AAChC,WAAW,uBAAuB;AAClC;AACA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA,mBAAmB,wBAAwB;AAC3C;AACA;AACA,4BAA4B,aAAiB;AAC7C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,sDAAsD,gBAAgB;AACtE;AACA;AACA;AACA,mBAAmB,UAAU;AAC7B;;AAEA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7Ee;AACf;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACfe;AACf;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;;ACTe;AACf;AACA,aAAa,OAAO;AACpB,aAAa,cAAc;AAC3B;AACA;AACA;AACA;AACA;AACA;;;ACTwD;AAC1B;AACQ;AACc;AACA;AACZ;AACQ;;AAU9C","file":"lorehub-dialog-player.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"lorehub-dialog-player\"] = factory();\n\telse\n\t\troot[\"lorehub-dialog-player\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import DialogNode from \"./DialogNode\";\r\n\r\nexport default class Dialog {\r\n  /**\r\n   * @param {String} id\r\n   * @param {DialogNode} startNode\r\n   */\r\n  constructor(id, startNode) {\r\n    if (id == null || startNode == null) {\r\n      throw new Error(\"Cannot create Dialog because id or/and startNode is null.\");\r\n    }\r\n\r\n    this.id = id;\r\n    this.startNode = startNode;\r\n    this._currnetNode = startNode;\r\n\r\n    startNode.subscribe(this);\r\n  }\r\n\r\n  /**\r\n   * @returns {DialogNode}\r\n   */\r\n  get currentNode() {\r\n    return this._currnetNode;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean}\r\n   */\r\n  get finished() {\r\n    if (this._currnetNode.nextNode == null) return true;\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {DialogNode} nextNode\r\n   */\r\n  onNext(nextNode) {\r\n    this._currnetNode.unsubscribe(this);\r\n    nextNode.subscribe(this);\r\n    this._currnetNode = nextNode;\r\n  }\r\n}\r\n","import DialogTextContent from \"./DialogTextContent\";\r\nexport default class DialogNode {\r\n  /**\r\n   * @param {String} id\r\n   * @param {Array<DialogTextContent> | DialogTextContent} content\r\n   * @param {DialogNode|null} nextNode\r\n   */\r\n  constructor(id, content, nextNode = null) {\r\n    if (id == null || content == null) {\r\n      throw new Error(\r\n        `Cannot create DialogNode because id: ${id} or content: ${content} is null.`\r\n      );\r\n    }\r\n\r\n    this.id = id;\r\n    this.nextNode = nextNode;\r\n\r\n    if (content.length == null) {\r\n      this.content = [content];\r\n    } else {\r\n      this.content = content;\r\n    }\r\n\r\n    this.subscribers = [];\r\n  }\r\n\r\n  /**\r\n   * @throws error when next node is null.\r\n   */\r\n  goNext() {\r\n    if (this.nextNode == null) {\r\n      throw new Error(\"NextNode is null, so I cannot go to next one.\");\r\n    }\r\n\r\n    this.subscribers.forEach(observer => {\r\n      observer.onNext(this.nextNode);\r\n    });\r\n  }\r\n\r\n  subscribe(subscriber) {\r\n    if (subscriber.onNext == null) {\r\n      throw new Error(\r\n        \"You cannot subscribe because 'onNext' function is not defined.\"\r\n      );\r\n    }\r\n    this.subscribers.push(subscriber);\r\n  }\r\n\r\n  unsubscribe(subscriber) {\r\n    const toRemoveIndex = this.subscribers.findIndex(e => e === subscriber);\r\n    if (toRemoveIndex > -1) {\r\n      this.subscribers.splice(toRemoveIndex, 1);\r\n    }\r\n  }\r\n}\r\n","export default class DialogContent {\r\n  /**\r\n   * @param {string} id\r\n   * @param {string} value\r\n   */\r\n  constructor(id, value) {\r\n    this.id = id;\r\n    this.value = value;\r\n  }\r\n}\r\n","import Dialog from \"./Dialog\";\r\nimport DialogNode from \"./DialogNode\";\r\nimport DialogTextContent from \"./DialogTextContent\";\r\nimport DialogDTO from \"./dto/DialogDTO\";\r\nimport DialogNodeDTO from \"./dto/DialogNodeDTO\";\r\nimport ContetnBlockDTO from \"./dto/ContetnBlockDTO\";\r\n\r\n/**\r\n * Will convert data from server to a dialog.\r\n * @param {DialogDTO} dialogDTO\r\n * @param {Array<DialogNodeDTO>} dialogNodesDTO\r\n * @param {Array<ContetnBlockDTO>} contentBlocksDTO\r\n * @returns {Dialog}\r\n */\r\nexport default function convertDataToDialog(\r\n  dialogDTO,\r\n  dialogNodesDTO,\r\n  contentBlocksDTO\r\n) {\r\n  if (dialogDTO == null || dialogNodesDTO == null || contentBlocksDTO == null) {\r\n    throw new Error(\r\n      `Cannot convert DTOs to a Dialog because \r\n      dialogDTO: ${dialogDTO} cannot be null OR \r\n      dialogNodesDTO: ${dialogNodesDTO} cannot be null OR \r\n      contentBlocksDTO: ${contentBlocksDTO} cannot be null.`\r\n    );\r\n  }\r\n\r\n  const nodes = createDialogNodes(dialogNodesDTO, contentBlocksDTO);\r\n  const startingNode = nodes.find(n => n.id === dialogDTO.startingNodeId);\r\n\r\n  if (startingNode == null) {\r\n    throw new Error(\r\n      `Cannot find starting node with id ${dialogDTO.startingNodeId}.`\r\n    );\r\n  }\r\n  const dialog = new Dialog(dialogDTO.id, startingNode);\r\n  return dialog;\r\n}\r\n\r\n/**\r\n * @param {Array<DialogNodeDTO>} dialogNodesDTO\r\n * @param {Array<ContetnBlockDTO>} contentBlocksDTO\r\n */\r\nfunction createDialogNodes(dialogNodesDTO, contentBlocksDTO) {\r\n  let nodes = [];\r\n  for (let i = 0; i < dialogNodesDTO.length; i++) {\r\n    const dto = dialogNodesDTO[i];\r\n    const contentDTOs = contentBlocksDTO\r\n      .filter(c => c.dialogNodeId == dto.id)\r\n      .sort((a, b) => (a.index > b.index ? 1 : -1));\r\n    let contentForNode = [];\r\n    for (let i = 0; i < contentDTOs.length; i++) {\r\n      const contentDTO = contentDTOs[i];\r\n      if (contentDTO.type === \"text\") {\r\n        const content = new DialogTextContent(\r\n          contentDTO.id,\r\n          contentDTO.data.text\r\n        );\r\n        contentForNode.push(content);\r\n      } else {\r\n        throw new Error(\r\n          `Cannot convert to DialogContent for type ${contentDTO.type}.`\r\n        );\r\n      }\r\n    }\r\n    nodes.push(new DialogNode(dto.id, contentForNode, null));\r\n  }\r\n\r\n  for (let i = 0; i < nodes.length; i++) {\r\n    const dto = dialogNodesDTO[i];\r\n    const node = nodes[i];\r\n    if (dto.nextDialogNodeId) {\r\n      node.nextNode = nodes.find(n => n.id === dto.nextDialogNodeId);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n","export default class ContetnBlockDTO {\r\n  /**\r\n   * @param {String} id\r\n   * @param {String} dialogNodeId\r\n   * @param {String} type\r\n   * @param {Number} index\r\n   * @param {Array<any>} data\r\n   */\r\n  constructor(id, dialogNodeId, type, index, data) {\r\n    this.id = id;\r\n    this.dialogNodeId = dialogNodeId;\r\n    this.type = type;\r\n    this.index = index;\r\n    this.data = data;\r\n  }\r\n}\r\n","export default class DialogDTO {\r\n  /**\r\n   * @param {String} id\r\n   * @param {String} startingNodeId\r\n   */\r\n  constructor(id, startingNodeId) {\r\n    this.id = id;\r\n    this.startingNodeId = startingNodeId;\r\n  }\r\n}\r\n","export default class DialogNodeDTO {\r\n  /**\r\n   * @param {String} id\r\n   * @param {String | null} nextDialogNodeId\r\n   */\r\n  constructor(id, nextDialogNodeId = null) {\r\n    this.id = id;\r\n    this.nextDialogNodeId = nextDialogNodeId;\r\n  }\r\n}\r\n","import convertDataToDialog from './convertDataToDialog';\r\nimport Dialog from './Dialog';\r\nimport DialogNode from './DialogNode';\r\nimport DialogTextContent from './DialogTextContent';\r\nimport ContetnBlockDTO from './dto/ContetnBlockDTO';\r\nimport DialogDTO from './dto/DialogDTO';\r\nimport DialogNodeDTO from './dto/DialogNodeDTO';\r\n\r\nexport {\r\n    convertDataToDialog,\r\n    Dialog,\r\n    DialogNode,\r\n    DialogTextContent,\r\n    ContetnBlockDTO,\r\n    DialogDTO,\r\n    DialogNodeDTO\r\n};\r\n"],"sourceRoot":""}